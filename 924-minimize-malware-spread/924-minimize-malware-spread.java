class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        
        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }
        
        int[] parent = uf.getParent();
        int[] size = uf.getSize();
        
        int[] idToMalwareCount = new int[n];
        for (int i : initial) {
            idToMalwareCount[uf.find(i)]++;
        }
        
        Arrays.sort(initial);
        
        int maxSize = 0, malwareInMaxSize = initial[0];
        for (int i : initial) {
            
            int rootI = uf.find(i);
            int malwareCount = idToMalwareCount[rootI];
            if (malwareCount == 1) {
                int sz = size[rootI];
                if (sz > maxSize) {
                    maxSize = sz;
                    malwareInMaxSize = i;
                }
            }
        }
        
        return malwareInMaxSize;
    }
    
    class UF {
        private int[] parent;
        private int[] size;
        
        public UF(int n) {
            parent = new int[n];
            size = new int[n];
            
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            
            if (rootX != rootY) {
                parent[rootX] = rootY;
                size[rootY] += size[rootX];
            }
        }
        
        public int find(int x) {
            if (parent[x] == x) {
                return x;
            }
            
            return parent[x] = find(parent[x]);
        }
        
        public int[] getParent() {
            return parent;
        }
        
        public int[] getSize() {
            return size;
        }
    }
}